# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

# Form implementation generated from reading ui file 'Sidebar_03.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.uic import loadUiType
from PyQt5.QtPrintSupport import QPrintDialog, QPrinter

from PyQt5.QtWidgets import QFileDialog

import res_rc
import os
from os import path
import sys
import urllib.request

import sqlite3
import MySQLdb
import datetime
from xlsxwriter import *
from xlrd import *
import pyqtgraph as pg

import decimal
from decimal import Decimal


########## import UI File ######## (Graviola_05)

FORM_CLASS, _ = loadUiType(path.join(path.dirname(__file__), "Graviola_05.ui"))

'''
employee_id = 0
employee_branch = 1
'''

######## intiate UI File ########## (Graviola_05)
class Main(QMainWindow, FORM_CLASS):
    def __init__(self, parent=None):
        super(Main, self).__init__(parent)
        QMainWindow.__init__(self)
        self.setupUi(self)
        self.UI_Changes()
        self.Db_Connect()
        self.showMaximized()    # To open a window maximized (Done)
        self.Handel_Buttons()
        self.Handel_Add_Product_ComboBox()

        self.Show_All_Locations()
        self.Show_All_Governorate()
        self.Show_Governorate()
        self.Show_All_City()
        self.Show_All_Area()
        self.Show_All_Delivery()
        self.Show_Delivery()
        self.Show_Clients()
        self.Show_All_Clients()
        self.Show_All_Products()
        self.Show_Products()
        self.Show_All_Employees()
        self.Calculate_Total_Order()

    ## UI Changes in Login ## (Graviola_05)
    def UI_Changes(self):
        #self.tabWidget.tabBar().setVisible(False) # main tabWidget (CRM-Login)
        self.tabWidget_5.tabBar().setVisible(False)    # Home tabWidget
        self.icon_only_widget_2.hide()
        #self.tabWidget_2.tabBar().setVisible(False)    # customers tabWidget
        #self.tabWidget_3.tabBar().setVisible(False)    # Products tabWidget
        #self.tabWidget_8.tabBar().setVisible(False)    # Orders tabWidget
        #self.tabWidget_10.tabBar().setVisible(False)    # Orders tabWidget
        #self.tabWidget_4.tabBar().setVisible(False)    # Delivery tabWidget
        #self.tabWidget_6.tabBar().setVisible(False)    # Employees tabWidget
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        self.tabWidget_3.setCurrentIndex(0)
        self.tabWidget_5.setCurrentIndex(0)
        self.tabWidget_8.setCurrentIndex(0)
        self.tabWidget_10.setCurrentIndex(0)
        self.tabWidget_4.setCurrentIndex(0)
        self.tabWidget_6.setCurrentIndex(0)

    ## Connection between App and DB (Graviola_05)
    def Db_Connect(self):
        self.db = MySQLdb.connect(host='localhost', user='root.db', password='P@ssw0rd', database='graviola_test')          ## connect to localhost mysql database
        #self.db = MySQLdb.connect(host='192.168.1.208', user='root.db', password='P@ssw0rd', database='Graviola')        ##connect to server mysql database
        self.cur = self.db.cursor()
        #print('DB_Connection Accepted')

    ## Handel All Buttons In Our App (Graviola_05)
    def Handel_Buttons(self):
        self.sidebar_btn.setChecked(True)

        self.logout_btn.clicked.connect(self.Open_Login_Tap)
        self.home_btn_1.clicked.connect(self.Open_Home_Tap)
        self.home_btn_2.clicked.connect(self.Open_Home_Tap)
        self.customer_btn_1.clicked.connect(self.Open_Clients_Tap)
        self.customer_btn_2.clicked.connect(self.Open_Clients_Tap)
        self.products_btn_1.clicked.connect(self.Open_Products_Tap)
        self.products_btn_2.clicked.connect(self.Open_Products_Tap)
        self.orders_btn_1.clicked.connect(self.Open_Orders_Tap)
        self.orders_btn_2.clicked.connect(self.Open_Orders_Tap)
        self.locations_btn_1.clicked.connect(self.Open_Locations_Tap)
        self.locations_btn_2.clicked.connect(self.Open_Locations_Tap)
        self.deliverys_btn_1.clicked.connect(self.Open_Delivery_Tap)
        self.deliverys_btn_2.clicked.connect(self.Open_Delivery_Tap)
        self.employees_btn_1.clicked.connect(self.Open_Employees_Tap)
        self.employees_btn_2.clicked.connect(self.Open_Employees_Tap)
        self.dashboard_btn_1.clicked.connect(self.Open_Dashboard_Tap)
        self.dashboard_btn_2.clicked.connect(self.Open_Dashboard_Tap)
        self.reportes_btn_1.clicked.connect(self.Open_Reports_Tap)
        self.reportes_btn_2.clicked.connect(self.Open_Reports_Tap)
        self.settings_btn_1.clicked.connect(self.Open_Settings_Tap)
        self.settings_btn_2.clicked.connect(self.Open_Settings_Tap)

        self.add_area_btn.clicked.connect(self.Add_New_Location)
        self.add_governorate_btn.clicked.connect(self.Add_Governorate)
        self.add_product_btn.clicked.connect(self.Add_New_Product)
        self.add_clint_btn.clicked.connect(self.Add_New_Client)
        self.add_delivery_btn.clicked.connect(self.Add_New_Delivery)
        self.add_employee_btn.clicked.connect(self.Add_New_Employee)

        self.search_products_btn.clicked.connect(self.Edit_Product_Search)
        self.search_client_btn.clicked.connect(self.Edit_Client_Search)
        self.search_location_btn.clicked.connect(self.Edit_Location_Search)
        self.search_delivery_btn.clicked.connect(self.Edit_Delivery_Search)
        self.search_employee_btn.clicked.connect(self.Edit_Employee_Search)
        self.search_governorate_btn.clicked.connect(self.Edit_Governorate_Search)

        self.edit_area_btn.clicked.connect(self.Edit_Location)
        self.edit_governorate_btn.clicked.connect(self.Edit_Governorate)
        self.edit_product_btn.clicked.connect(self.Edit_Product)
        self.edit_client_btn.clicked.connect(self.Edit_Client)
        self.edit_delivery_btn.clicked.connect(self.Edit_Delivery)

        self.delet_product_btn.clicked.connect(self.Delete_Product)
        self.delet_client_btn.clicked.connect(self.Delete_Client)
        self.delet_location_btn.clicked.connect(self.Delete_Location)
        self.delet_governorate_btn.clicked.connect(self.Delet_Governorate)
        self.delet_delivery_btn.clicked.connect(self.Delete_Delivery)

        #self.add_item_order_btn.clicked.connect(self.Add_Item_Order)

        #self.pushButton_94.clicked.connect(self.Show_Total_Order)

        self.delete_btn_3.clicked.connect(self.Delete_Item_01_order)
        self.delete_btn_4.clicked.connect(self.Delete_Item_02_order)
        self.delete_btn_5.clicked.connect(self.Delete_Item_03_order)
        self.delete_btn_6.clicked.connect(self.Delete_Item_04_order)
        self.delete_btn_7.clicked.connect(self.Delete_Item_05_order)
        self.delete_btn_8.clicked.connect(self.Delete_Item_06_order)
        self.delete_btn_9.clicked.connect(self.Delete_Item_07_order)
        self.delete_btn_10.clicked.connect(self.Delete_Item_08_order)
        self.delete_btn_11.clicked.connect(self.Delete_Item_09_order)
        self.delete_btn_12.clicked.connect(self.Delete_Item_10_order)

        self.add_order_btm.clicked.connect(self.Add_Order)


    ## Open Login Tap (Graviola_05)
    def Open_Login_Tap(self):
        self.tabWidget.setCurrentIndex(0)
        # print('Home Tap')

    ## Open Home Tap (Graviola_05)
    def Open_Home_Tap(self):
        self.tabWidget_5.setCurrentIndex(0)
        # print('Home Tap')

    ## Open Customers Tap (Graviola_05)
    def Open_Clients_Tap(self):
        self.tabWidget_5.setCurrentIndex(1)
        self.tabWidget_2.setCurrentIndex(0)
        # print('Clients Tap')

    ## Open Products Tap (Graviola_05)
    def Open_Products_Tap(self):
        self.tabWidget_5.setCurrentIndex(2)
        self.tabWidget_3.setCurrentIndex(0)
        # print('Products Tap')

    ## Open Orders Tap (Graviola_05)
    def Open_Orders_Tap(self):
        self.tabWidget_5.setCurrentIndex(3)
        self.tabWidget_8.setCurrentIndex(0)
        # print('Orders Tap')

    ## Open Locations Tap (Graviola_05)
    def Open_Locations_Tap(self):
        self.tabWidget_5.setCurrentIndex(4)
        self.tabWidget_10.setCurrentIndex(0)
        # print('Locations Tap')

    ## Open Delivery Tap (Graviola_05)
    def Open_Delivery_Tap(self):
        self.tabWidget_5.setCurrentIndex(5)
        self.tabWidget_4.setCurrentIndex(0)
        # print('Delivery Tap')

    ## Open Employees Tap (Graviola_05)
    def Open_Employees_Tap(self):
        self.tabWidget_5.setCurrentIndex(6)
        self.tabWidget_6.setCurrentIndex(0)
        # print('Employees Tap')

    ## Open Dashboard Tap (Graviola_05)
    def Open_Dashboard_Tap(self):
        self.tabWidget_5.setCurrentIndex(7)
        # print('Dashboard Tap')

    ## Open Reports Tap (Graviola_05)
    def Open_Reports_Tap(self):
        self.tabWidget_5.setCurrentIndex(8)
        # print('Reports Tap')

    ## Open Settings Tap (Graviola_05)
    def Open_Settings_Tap(self):
        self.tabWidget_5.setCurrentIndex(9)
        # print('Settings Tap')

##################################

    ## Handel Login
    def Handel_Login(self):
        pass

    ## Handel Reset Password
    def Handel_Reset_Password(self):
        pass


##################################
    ## Handel to day operations
    def Handel_to_Day_Work(self):
        pass



##################################
    ## Show All Products
    def Show_All_Products(self):
        #self.comboBox_25.clear()
        #self.comboBox_34.clear()
        #self.comboBox_35.clear()
        #self.comboBox_36.clear()
        #self.comboBox_37.clear()
        #self.comboBox_38.clear()
        #self.comboBox_30.clear()
        #self.comboBox_32.clear()
        #self.comboBox_50.clear()
        self.comboBox_52.clear()
        self.comboBox_53.clear()

        self.cur.execute('''
                            SELECT title_Product FROM products
                        ''')
        products = self.cur.fetchall()
        # print(products)

        for product in products:
            # print(client[0])

            self.comboBox_24.addItem(str(product[0]))
            self.comboBox_25.addItem(str(product[0]))
            self.comboBox_34.addItem(str(product[0]))
            self.comboBox_35.addItem(str(product[0]))
            self.comboBox_36.addItem(str(product[0]))
            self.comboBox_37.addItem(str(product[0]))
            self.comboBox_38.addItem(str(product[0]))
            self.comboBox_30.addItem(str(product[0]))
            self.comboBox_32.addItem(str(product[0]))
            self.comboBox_50.addItem(str(product[0]))
            self.comboBox_52.addItem(str(product[0]))
            self.comboBox_53.addItem(str(product[0]))


    def Show_Products(self):

        self.tableWidget_2.setRowCount(0)
        self.tableWidget_2.insertRow(0)

        self.cur.execute('''
                    SELECT code_Product, title_Product, description_Product, price_Product, Product_unit FROM products
                ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget_2.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget_2.rowCount()
            self.tableWidget_2.insertRow(row_position)

            # print(data)

    ## Add New Product
    def Add_New_Product(self):
        code_Product = self.lineEdit_42.text()
        title_Product = self.lineEdit_67.text()
        description_Product = self.lineEdit_200.text()
        price_Product = self.lineEdit_199.text()
        #image_Product = CharField(null=True)
        Product_unit = self.comboBox_11.currentIndex()

        self.cur.execute('''
            INSERT INTO products(code_Product,title_Product,description_Product,price_Product,Product_unit)
            VALUES (%s, %s, %s, %s, %s)
        ''', (code_Product, title_Product, description_Product, price_Product, Product_unit))

        self.db.commit()
        self.lineEdit_42.setText('')
        self.lineEdit_67.setText('')
        self.lineEdit_200.setText('')
        self.lineEdit_199.setText('')
        self.comboBox_11.setCurrentIndex(0)
        self.statusBar().showMessage('تم إضافة بيانات المنتج بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Product Added')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Products()
        self.Show_Products()
        self.Show_History()

    ## Edit Product Search
    def Edit_Product_Search(self):
        product_code = self.lineEdit_42.text()

        sql = ('''
                            SELECT * FROM products WHERE code_Product = %s
                        ''')

        self.cur.execute(sql, [(product_code)])

        data = self.cur.fetchone()
        #print(data)

        self.lineEdit_42.setText(str(data[1]))
        self.lineEdit_67.setText(str(data[2]))
        self.comboBox_11.setCurrentIndex(int(data[6]))
        self.lineEdit_199.setText(str(data[4]))
        self.lineEdit_200.setText(str(data[3]))


    ## Edit Product
    def Edit_Product(self):
        code_Product = self.lineEdit_42.text()
        title_Product = self.lineEdit_67.text()
        description_Product = self.lineEdit_200.text()
        price_Product = self.lineEdit_199.text()
        # image_Product = CharField(null=True)
        Product_unit = self.comboBox_11.currentIndex()

        self.cur.execute('''
                    UPDATE products SET title_Product=%s, description_Product=%s, price_Product=%s, Product_unit=%s WHERE code_Product=%s
                ''', (title_Product, description_Product, price_Product, Product_unit, code_Product))

        self.db.commit()
        self.lineEdit_42.setText('')
        self.lineEdit_67.setText('')
        self.lineEdit_200.setText('')
        self.lineEdit_199.setText('')
        self.comboBox_11.setCurrentIndex(0)
        self.statusBar().showMessage('تم تعديل بيانات المنتج بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Product Edited')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Products()
        self.Show_Products()
        self.Show_History()


    ## Delete Product from DB
    def Delete_Product(self):
        code_Product = self.lineEdit_42.text()
        date = datetime.datetime.now()

        delete_message = QMessageBox.warning(self, "مسح معلومات", "هل أنت متأكد من مسح المنتج؟",
                                             QMessageBox.Yes | QMessageBox.No)

        if delete_message == QMessageBox.Yes:
            sql = ('''
                        DELETE FROM products WHERE code_Product = %s
                    ''')

        self.cur.execute(sql, [(code_Product)])

        self.db.commit()
        self.lineEdit_42.setText('')
        self.lineEdit_67.setText('')
        self.lineEdit_200.setText('')
        self.lineEdit_199.setText('')
        self.comboBox_11.setCurrentIndex(0)
        self.statusBar().showMessage('تم حزف بيانات المنتج بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Product Deleted')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Products()
        self.Show_Products()
        self.Show_History()


    ##################################
    ## Show All Clients
    def Show_All_Clients(self):
        self.tableWidget.setRowCount(0)
        self.tableWidget.insertRow(0)

        self.cur.execute('''
                    SELECT code_client, name_client, phone_client_1, Promo_code, area_client_id, address_client FROM clients
                ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row_position)

    def Show_Clients(self):
        self.comboBox_33.clear()
        self.comboBox_51.clear()
        self.comboBox_39.clear()

        self.cur.execute('''
                    SELECT name_client FROM clients
                ''')
        clients = self.cur.fetchall()
        # print(clients)

        for client in clients:
            # print(client[0])

            self.comboBox_33.addItem(str(client[0]))
            self.comboBox_51.addItem(str(client[0]))
            self.comboBox_39.addItem(str(client[0]))

    ## Add New Client
    def Add_New_Client(self):
        code_client = self.lineEdit_35.text()
        name_client = self.lineEdit_60.text()
        phone_client_1 = self.lineEdit_181.text()
        phone_client_2 = self.lineEdit_179.text()
        Promo_code = self.lineEdit_182.text()
        area_clint_id = self.comboBox_6.currentIndex()
        governorate_client = self.comboBox_16.currentText()
        address_client = self.lineEdit_180.text()

        self.cur.execute('''
                    INSERT INTO clients(code_client,name_client,phone_client_1,phone_client_2,Promo_code,area_client_id,governorate_client,address_client)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', (code_client, name_client, phone_client_1, phone_client_2, Promo_code, area_clint_id, governorate_client, address_client))

        self.db.commit()
        self.lineEdit_35.setText('')
        self.lineEdit_60.setText('')
        self.lineEdit_181.setText('')
        self.lineEdit_179.setText('')
        self.lineEdit_182.setText('')
        self.comboBox_6.setCurrentIndex(0)
        self.comboBox_16.setCurrentIndex(0)
        self.lineEdit_180.setText('')
        self.statusBar().showMessage('تم إضافة بيانات العميل بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Client Added')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Clients()
        self.Show_Clients()
        self.Show_History()

    ## Edit Client Search
    def Edit_Client_Search(self):
        client_code = self.lineEdit_35.text()

        sql = ('''
                            SELECT * FROM clients WHERE code_client = %s
                        ''')

        self.cur.execute(sql, [(client_code)])

        data = self.cur.fetchone()
        #print(data)

        self.lineEdit_35.setText(str(data[1]))
        self.lineEdit_60.setText(str(data[2]))
        self.lineEdit_181.setText(str(data[3]))
        self.lineEdit_179.setText(str(data[4]))
        self.lineEdit_182.setText(str(data[5]))
        self.comboBox_6.setCurrentIndex(data[7])
        self.comboBox_16.setCurrentText(str(data[6]))
        self.lineEdit_180.setText(str(data[8]))


    ## Edit Client
    def Edit_Client(self):
        code_client = self.lineEdit_35.text()
        name_client = self.lineEdit_60.text()
        phone_client_1 = self.lineEdit_181.text()
        phone_client_2 = self.lineEdit_179.text()
        Promo_code = self.lineEdit_182.text()
        area_clint_id = self.comboBox_6.currentIndex()
        governorate_client = self.comboBox_16.currentText()
        address_client = self.lineEdit_180.text()

        self.cur.execute('''
                            UPDATE clients SET name_client=%s, phone_client_1=%s, phone_client_2=%s, Promo_code=%s, area_client_id=%s, governorate_client=%s, address_client=%s WHERE code_client=%s
                        ''', (name_client, phone_client_1, phone_client_2, Promo_code, area_clint_id, governorate_client, address_client, code_client))

        self.db.commit()
        self.lineEdit_35.setText('')
        self.lineEdit_60.setText('')
        self.lineEdit_181.setText('')
        self.lineEdit_179.setText('')
        self.lineEdit_182.setText('')
        self.comboBox_6.setCurrentIndex(0)
        self.comboBox_16.setCurrentIndex(0)
        self.lineEdit_180.setText('')
        self.statusBar().showMessage('تم تعديل بيانات العميل بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Client Edited')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Clients()
        self.Show_Clients()
        self.Show_History()

    ## Delette Client from DB
    def Delete_Client(self):
        code_client = self.lineEdit_35.text()
        date = datetime.datetime.now()

        delete_message = QMessageBox.warning(self, "مسح معلومات", "هل أنت متأكد من مسح العميل؟",
                                             QMessageBox.Yes | QMessageBox.No)

        if delete_message == QMessageBox.Yes:
            sql = ('''
                                DELETE FROM clients WHERE code_client = %s
                            ''')

        self.cur.execute(sql, [(code_client)])

        self.db.commit()
        self.lineEdit_35.setText('')
        self.lineEdit_60.setText('')
        self.lineEdit_181.setText('')
        self.lineEdit_179.setText('')
        self.lineEdit_182.setText('')
        self.comboBox_6.setCurrentIndex(0)
        self.comboBox_16.setCurrentIndex(0)
        self.lineEdit_180.setText('')
        self.statusBar().showMessage('تم مسح بيانات العميل بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Client Deleted')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Clients()
        self.Show_Clients()
        self.Show_History()

##################################
    ## Orders ##
##################################

    def Handel_Add_Product_ComboBox(self):
        self.comboBox_52.activated.connect(self.Get_Price_Product)
        self.comboBox_39.activated.connect(self.Get_Client_Inf)
        self.comboBox_40.activated.connect(self.Get_Delivery_Inf)

    def Get_Client_Inf(self):
        name_client = self.comboBox_39.currentText()

        sql = ('''
                SELECT * FROM clients WHERE name_client = %s
            ''')
        self.cur.execute(sql, [(name_client)])

        data = self.cur.fetchone()
        #print(data)

        self.lineEdit_96.setText(str(data[3]))
        self.comboBox_26.setCurrentText(str(data[6]))
        self.comboBox_27.setCurrentIndex(data[7])
        self.lineEdit_97.setText(str(data[8]))

    def Get_Delivery_Inf(self):
        name_delivery = self.comboBox_40.currentText()

        sql = ('''
                        SELECT * FROM delivery WHERE name_delivery = %s
                    ''')
        self.cur.execute(sql, [(name_delivery)])

        data = self.cur.fetchone()
        #print(data)

        self.comboBox_40.setCurrentText(str(data[2]))
        self.lineEdit_99.setText(str(data[3]))

    def Get_Price_Product(self):

        title_Product = self.comboBox_52.currentText()
        self.item_def_number = 1
        self.total_price = 0

        sql = ('''
                SELECT * FROM products WHERE title_Product = %s
            ''')

        self.cur.execute(sql, [(title_Product)])

        data = self.cur.fetchone()
        #print(data)

        self.lineEdit_4.setText(str(data[4]))
        self.lineEdit_13.setText(str(self.item_def_number))
        self.pushButton_41.clicked.connect(self.on_increase_button_clicked)
        self.pushButton_40.clicked.connect(self.decreaseNumber)
        self.add_item_order_btn.clicked.connect(self.Add_Item_Order)

    def on_increase_button_clicked(self):
        self.item_def_number += 1
        self.lineEdit_13.setText(str(self.item_def_number))

    def decreaseNumber(self):
        try:
            #self.item_def_number = int(self.lineEdit_13.text())
            if self.item_def_number > 0:
                self.item_def_number -= 1
                self.lineEdit_13.setText(str(self.item_def_number))
        except ValueError:
            self.lineEdit_13.setText('Invalid Input')

    def Show_Item_Order(self):
        pass

    def Add_Item_Order(self):
        item_name = str(self.comboBox_52.currentText())
        item_price = self.lineEdit_4.text()
        item_number = self.lineEdit_13.text()
        discount = self.lineEdit_57.text()
        delivery_value = self.lineEdit_56.text()

        self.item_def_number = 1

        item_price_decimal = Decimal(item_price)
        item_number_decimal = Decimal(item_number)
        discount_decimal = Decimal(discount)
        delivery_value_decimal = Decimal(delivery_value)
        sub_total = item_price_decimal * item_number_decimal

        total = delivery_value_decimal - discount_decimal
        total += sub_total

        if self.lineEdit_216.text() == "":
            self.lineEdit_216.setText(str(item_name))
            self.lineEdit_214.setText(str(item_price))
            self.lineEdit_215.setText(str(item_number))
            self.lineEdit_213.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_222.text() == "":
            self.lineEdit_222.setText(str(item_name))
            self.lineEdit_218.setText(str(item_price))
            self.lineEdit_220.setText(str(item_number))
            self.lineEdit_219.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_226.text() == "":
            self.lineEdit_226.setText(str(item_name))
            self.lineEdit_223.setText(str(item_price))
            self.lineEdit_225.setText(str(item_number))
            self.lineEdit_224.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_230.text() == "":
            self.lineEdit_230.setText(str(item_name))
            self.lineEdit_227.setText(str(item_price))
            self.lineEdit_229.setText(str(item_number))
            self.lineEdit_228.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_234.text() == "":
            self.lineEdit_234.setText(str(item_name))
            self.lineEdit_231.setText(str(item_price))
            self.lineEdit_233.setText(str(item_number))
            self.lineEdit_232.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_238.text() == "":
            self.lineEdit_238.setText(str(item_name))
            self.lineEdit_235.setText(str(item_price))
            self.lineEdit_237.setText(str(item_number))
            self.lineEdit_236.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_242.text() == "":
            self.lineEdit_242.setText(str(item_name))
            self.lineEdit_239.setText(str(item_price))
            self.lineEdit_241.setText(str(item_number))
            self.lineEdit_240.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_246.text() == "":
            self.lineEdit_246.setText(str(item_name))
            self.lineEdit_243.setText(str(item_price))
            self.lineEdit_245.setText(str(item_number))
            self.lineEdit_244.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_250.text() == "":
            self.lineEdit_250.setText(str(item_name))
            self.lineEdit_247.setText(str(item_price))
            self.lineEdit_249.setText(str(item_number))
            self.lineEdit_248.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        elif self.lineEdit_254.text() == "":
            self.lineEdit_254.setText(str(item_name))
            self.lineEdit_251.setText(str(item_price))
            self.lineEdit_253.setText(str(item_number))
            self.lineEdit_252.setText(str(sub_total))
            self.lineEdit_39.setText(str(total))

        else:
            self.statusBar().showMessage('تم أكتمال الطلب لا يمكن إضافة أصناف أخرى')
            self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
            print("The Order is full")
        #print(item_name)
        #print(item_price)
        #print(item_number)
        #print(sub_total)

        self.comboBox_52.setCurrentIndex(0)
        self.lineEdit_4.setText('')
        self.lineEdit_13.setText(str(self.item_def_number))
        self.Calculate_Total_Order()
        #self.Show_Total_Order()

    def Add_Order(self):
        code_order = self.lineEdit_94.text()
        code_clint = self.comboBox_39.currentIndex()
        employee = '001'
        code_delivery = self.comboBox_40.currentIndex()
        order_status = self.comboBox_29.currentIndex()
        date_order = datetime.datetime.now()
        date_expected = self.dateEdit_14.date()
        date_deliver = self.dateEdit_15.date()
        id_itm_01 = self.lineEdit_216.text()
        number_itm_01 = self.lineEdit_215.text()
        id_itm_02 = self.lineEdit_222.text()
        number_itm_02 = self.lineEdit_220.text()
        id_itm_03 = self.lineEdit_226.text()
        number_itm_03 = self.lineEdit_225.text()
        id_itm_04 = self.lineEdit_230.text()
        number_itm_04 = self.lineEdit_229.text()
        id_itm_05 = self.lineEdit_234.text()
        number_itm_05 = self.lineEdit_233.text()
        id_itm_06 = self.lineEdit_238.text()
        number_itm_06 = self.lineEdit_237.text()
        id_itm_07 = self.lineEdit_242.text()
        number_itm_07 = self.lineEdit_241.text()
        id_itm_08 = self.lineEdit_246.text()
        number_itm_08 = self.lineEdit_245.text()
        id_itm_09 = self.lineEdit_250.text()
        number_itm_09 = self.lineEdit_249.text()
        id_itm_10 = self.lineEdit_254.text()
        number_itm_10 = self.lineEdit_253.text()
        discount = self.lineEdit.text()
        delivery_value = self.lineEdit.text()
        total_order = self.lineEdit.text()
        print(code_order, code_clint, employee, order_status, date_order, date_expected, date_deliver, id_itm_01, number_itm_01, id_itm_02, number_itm_02, id_itm_03, number_itm_03, id_itm_04, number_itm_04, id_itm_05, number_itm_05, id_itm_06, number_itm_06, id_itm_07, number_itm_07, id_itm_08, number_itm_08, id_itm_09, number_itm_09, id_itm_10, number_itm_10, discount, delivery_value, total_order)
        """
        self.cur.execute('''
                INSERT INTO orders(code_order,code_clint_id,employee_id,order_status,date_order,date_expected,date_deliver,id_itm_01,number_itm_01,id_itm_02,number_itm_02,id_itm_03,number_itm_03,id_itm_04,number_itm_04,id_itm_05,number_itm_05,id_itm_06,number_itm_06,id_itm_07,number_itm_07,id_itm_08,number_itm_08,id_itm_09,number_itm_09,id_itm_10,number_itm_10,discount,delivery_value,total_order)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s ,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            ''', (code_order, code_clint, employee, order_status, date_order, date_expected, date_deliver, id_itm_01, number_itm_01, id_itm_02, number_itm_02, id_itm_03, number_itm_03, id_itm_04, number_itm_04, id_itm_05, number_itm_05, id_itm_06, number_itm_06, id_itm_07, number_itm_07, id_itm_08, number_itm_08, id_itm_09, number_itm_09, id_itm_10, number_itm_10, discount, delivery_value, total_order))

        self.db.commit()
        """
        self.cur.execute("""
            INSERT INTO orders(code_order, code_clint, employee, order_status, date_order, date_expected, date_deliver)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (code_order, code_clint, employee, order_status, date_order, date_expected, date_deliver))

        self.db.commit()

        self.lineEdit_94.setText('')
        self.comboBox_39.setCurrentIndex(0)
        self.comboBox_40.setCurrentIndex(0)
        self.comboBox_29.setCurrentIndex(0)
        self.statusBar().showMessage('تم إضافة بيانات الطلب بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Order Added')
        self.Clear_Massage_5_Seconds()
        self.Show_History()

    def Calculate_Total_Order(self):
        pass
        """
        default_price = 0
        itm_01_total = self.lineEdit_213.text()
        itm_02_total = self.lineEdit_219.text()
        itm_03_total = self.lineEdit_224.text()
        dis_order = self.lineEdit_58.text()
        del_value = self.lineEdit_56.text()

        total = itm_01_total + itm_02_total
        print(total)

        #self.lineEdits.append(total_price)
        self.lineEdit_39.setReadOnly(True)
        self.lineEdit_57.setText(str(default_price))
        self.lineEdit_56.setText(str(default_price))
        self.lineEdit_59.setText(itm_01_total + itm_02_total)
        """

        '''
        total_price = 0
        for row in range(self.tableWidget.rowCount()):
            price_item = self.tableWidget.item(row, 1)
            if price_item is not None:
                total_price += float(price_item.text())

        print(f'Total Price: {total_price}')
        '''

        """
        sub_total_01 = self.lineEdit_213.text()
        sub_total_02 = self.lineEdit_219.text()
        sub_total_03 = self.lineEdit_224.text()
        sub_total_04 = self.lineEdit_228.text()
        sub_total_05 = self.lineEdit_232.text()
        sub_total_06 = self.lineEdit_236.text()
        sub_total_07 = self.lineEdit_240.text()
        sub_total_08 = self.lineEdit_244.text()
        sub_total_09 = self.lineEdit_248.text()
        sub_total_10 = self.lineEdit_252.text()

        #discount = float(self.lineedit_price.text())
        dis_order = self.lineEdit_58.text()
        #delivery_value = self.lineEdit_59.text()
        del_value = self.lineEdit_59.text()
        total_order = dis_order + del_value
        print(total_order)
        self.lineEdit_64.setText(total_order)
        self.lineEdit_64.setText(f'The result is: {total_order}')
        :return: 
        """

    def Delete_Item_01_order(self):
        self.lineEdit_216.clear()
        self.lineEdit_215.clear()
        self.lineEdit_214.clear()
        self.lineEdit_213.clear()

    def Delete_Item_02_order(self):
        self.lineEdit_222.clear()
        self.lineEdit_220.clear()
        self.lineEdit_218.clear()
        self.lineEdit_219.clear()

    def Delete_Item_03_order(self):
        self.lineEdit_226.clear()
        self.lineEdit_225.clear()
        self.lineEdit_223.clear()
        self.lineEdit_224.clear()

    def Delete_Item_04_order(self):
        self.lineEdit_230.clear()
        self.lineEdit_229.clear()
        self.lineEdit_227.clear()
        self.lineEdit_228.clear()

    def Delete_Item_05_order(self):
        self.lineEdit_234.clear()
        self.lineEdit_233.clear()
        self.lineEdit_231.clear()
        self.lineEdit_232.clear()

    def Delete_Item_06_order(self):
        self.lineEdit_238.clear()
        self.lineEdit_237.clear()
        self.lineEdit_235.clear()
        self.lineEdit_236.clear()

    def Delete_Item_07_order(self):
        self.lineEdit_242.clear()
        self.lineEdit_241.clear()
        self.lineEdit_239.clear()
        self.lineEdit_240.clear()

    def Delete_Item_08_order(self):
        self.lineEdit_246.clear()
        self.lineEdit_245.clear()
        self.lineEdit_243.clear()
        self.lineEdit_244.clear()

    def Delete_Item_09_order(self):
        self.lineEdit_250.clear()
        self.lineEdit_249.clear()
        self.lineEdit_247.clear()
        self.lineEdit_248.clear()

    def Delete_Item_10_order(self):
        self.lineEdit_254.clear()
        self.lineEdit_253.clear()
        self.lineEdit_251.clear()
        self.lineEdit_252.clear()



##################################
    ## Show All Locations
    def Show_All_Locations(self):

        self.tableWidget_7.setRowCount(0)
        self.tableWidget_7.insertRow(0)

        self.cur.execute('''
                    SELECT id, area, city, governorate FROM locations
                ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget_7.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget_7.rowCount()
            self.tableWidget_7.insertRow(row_position)

    ##################################
    def Show_Governorate(self):
        self.tableWidget_13.setRowCount(0)
        self.tableWidget_13.insertRow(0)

        self.cur.execute('''
                            SELECT id, name_governorate FROM governorates_egy
                        ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget_13.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget_13.rowCount()
            self.tableWidget_13.insertRow(row_position)

    ##################################

    def Show_All_Governorate(self):
        self.comboBox_10.clear()
        self.comboBox_20.clear()
        self.comboBox_16.clear()
        self.comboBox_8.clear()
        self.comboBox_26.clear()

        self.cur.execute('''
                            SELECT name_governorate FROM governorates_egy
                        ''')
        governorates_list = self.cur.fetchall()
        # print(clients)

        for governorate in governorates_list:
            # print(client[0])

            self.comboBox_10.addItem(str(governorate[0]))
            self.comboBox_20.addItem(str(governorate[0]))
            self.comboBox_16.addItem(str(governorate[0]))
            self.comboBox_8.addItem(str(governorate[0]))
            self.comboBox_26.addItem(str(governorate[0]))
    """
        governorates_list = ["القاهرة","الجيزة","القليوبية","الإسكندرية","الإسماعيلية","أسوان","أسيوط","الأقصر","البحر الأحمر","البحيرة",
                             "بني سويف","بورسعيد","جنوب سيناء","الدقهلية","دمياط","سوهاج","السويس","الشرقية","شمال سيناء",
                             "الغربية","الفيوم","قنا","كفر الشيخ","مطروح","المنوفية","المنيا","الوادي الجديد"]

        self.comboBox_10.addItems(governorates_list)
        self.comboBox_20.addItems(governorates_list)
        self.comboBox_16.addItems(governorates_list)
    """
    def Add_Governorate(self):
        governorate = self.lineEdit_19.text()
        date = datetime.datetime.now()

        self.cur.execute(''' INSERT INTO governorates_egy
                (name_governorate, date)
                VALUES (%s, %s)
            ''', (governorate, date))

        self.db.commit()
        self.lineEdit_19.setText('')
        self.statusBar().showMessage('تم إضافة بيانات المحافظة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('governorate Added')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Governorate()
        self.Show_Governorate()
        self.Show_History()

    ## Edit Governorate Search
    def Edit_Governorate_Search(self):
        #governorate = self.lineEdit_19.text()
        governorate_id = self.lineEdit_78.text()

        sql = ('''
                               SELECT * FROM governorates_egy WHERE id = %s
                           ''')

        self.cur.execute(sql, [(governorate_id)])

        data = self.cur.fetchone()
        # print(data)

        self.lineEdit_78.setText(str(data[0]))
        self.lineEdit_19.setText(str(data[1]))

    def Edit_Governorate(self):
        governorate = self.lineEdit_19.text()
        governorate_id = self.lineEdit_78.text()

        self.cur.execute('''
                UPDATE governorates_egy SET name_governorate = %s WHERE id = %s
            ''', (governorate, governorate_id))

        self.db.commit()
        self.lineEdit_19.setText('')
        self.lineEdit_78.setText('')
        self.statusBar().showMessage('تم تعديل بيانات المحافظة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('governorate Edited')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Governorate()
        self.Show_Governorate()
        self.Show_History()

    def Delet_Governorate(self):
        governorate_id = self.lineEdit_78.text()
        date = datetime.datetime.now()

        delete_message = QMessageBox.warning(self, "مسح معلومات", "هل أنت متأكد من مسح المحافظة؟",
                                             QMessageBox.Yes | QMessageBox.No)

        if delete_message == QMessageBox.Yes:
            sql = ('''
                                        DELETE FROM governorates_egy WHERE id = %s
                                    ''')

        self.cur.execute(sql, [(governorate_id)])

        self.db.commit()
        self.lineEdit_19.setText('')
        self.lineEdit_78.setText('')
        self.statusBar().showMessage('تم حزف بيانات المحافظة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('governorate Deleted')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Governorate()
        self.Show_Governorate()
        self.Show_History()

    ##################################
    def Show_All_City(self):
        pass
        """
                self.comboBox_21.clear()
                self.comboBox_19.clear()
                self.comboBox_6.clear()
                self.cur.execute('''
                            SELECT city FROM locations
                        ''')
                cities = self.cur.fetchall()
                # print(cites)

                for city in cities:
                    print(city[0])

                    #self.comboBox_21.addItem(str(city[0]))
                    #self.comboBox_19.addItem(str(city[0]))
                    #self.comboBox_6.addItem(str(city[0]))
        """
    def Show_All_Area(self):
        self.comboBox_21.clear()
        self.comboBox_19.clear()
        self.comboBox_6.clear()
        self.comboBox_27.clear()

        self.cur.execute('''
                            SELECT area FROM locations
                        ''')
        areas = self.cur.fetchall()
        # print(areas)

        for area in areas:
            #print(area[0])

            self.comboBox_21.addItem(str(area[0]))
            self.comboBox_19.addItem(str(area[0]))
            self.comboBox_6.addItem(str(area[0]))
            self.comboBox_27.addItem(str(area[0]))

    ## Add New Location
    def Add_New_Location(self):
        area_name = self.lineEdit_68.text()
        city_name = self.lineEdit_16.text()
        governorate = self.comboBox_8.currentText()

        self.cur.execute(''' INSERT INTO locations
            (governorate, city, area)
            VALUES (%s, %s, %s)
        ''', (governorate, city_name, area_name))
        self.db.commit()
        self.lineEdit_68.setText('')
        self.lineEdit_16.setText('')
        self.comboBox_8.setCurrentIndex(0)
        self.statusBar().showMessage('تم إضافة بيانات المنطقة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Area Added')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Locations()
        self.Show_All_Governorate()
        self.Show_All_City()
        self.Show_All_Area()
        self.Show_History()

    ## Edit Location Search
    def Edit_Location_Search(self):
        area_id = self.lineEdit_77.text()

        sql = ('''
                            SELECT * FROM locations WHERE id = %s
                        ''')

        self.cur.execute(sql, [(area_id)])

        data = self.cur.fetchone()
        #print(data)

        self.comboBox_8.setCurrentText(str(data[1]))
        self.lineEdit_16.setText(str(data[2]))
        self.lineEdit_68.setText(str(data[3]))
        self.lineEdit_77.setText(str(data[0]))


    ## Edit Location
    def Edit_Location(self):
        area_name = self.lineEdit_68.text()
        city_name = self.lineEdit_16.text()
        governorate = self.comboBox_8.currentText()
        area_id = self.lineEdit_77.text()

        self.cur.execute(''' 
                UPDATE locations SET governorate=%s, city=%s, area=%s WHERE id=%s
            ''', (governorate, city_name, area_name, area_id))

        self.db.commit()
        self.lineEdit_77.setText('')
        self.lineEdit_68.setText('')
        self.lineEdit_16.setText('')
        self.comboBox_8.setCurrentIndex(0)
        self.statusBar().showMessage('تم تعديل بيانات المنطقة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Area Edited')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Locations()
        self.Show_All_Area()
        self.Show_History()

    ## Delette Location from DB
    def Delete_Location(self):
        area_id = self.lineEdit_77.text()
        date = datetime.datetime.now()

        delete_message = QMessageBox.warning(self, "مسح معلومات", "هل أنت متأكد من مسح المنطقة؟",
                                             QMessageBox.Yes | QMessageBox.No)

        if delete_message == QMessageBox.Yes:
            sql = ('''
                                DELETE FROM locations WHERE id = %s
                            ''')

        self.cur.execute(sql, [(area_id)])

        self.db.commit()
        self.lineEdit_77.setText('')
        self.lineEdit_68.setText('')
        self.lineEdit_16.setText('')
        self.comboBox_8.setCurrentIndex(0)
        self.statusBar().showMessage('تم مسح بيانات المنطقة بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Area Deleted')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Locations()
        self.Show_All_Area()
        self.Show_History()


    ##################################
    ## Show All Delivery
    def Show_All_Delivery(self):
        self.cur.execute('''
                SELECT name_delivery FROM delivery
            ''')
        deliveries = self.cur.fetchall()
        # print(deliveries)

        for delivery in deliveries:
            #print(delivery[0])

            self.comboBox_18.addItem(str(delivery[0]))
            self.comboBox_40.addItem(str(delivery[0]))

    def Show_Delivery(self):
        self.tableWidget_3.setRowCount(0)
        self.tableWidget_3.insertRow(0)

        self.cur.execute('''
                    SELECT code_delivery, name_delivery, phone_delivery_1, phone_delivery_2, area_delivery_id, address_delivery FROM delivery
                ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget_3.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget_3.rowCount()
            self.tableWidget_3.insertRow(row_position)

    ## Add New Delivery
    def Add_New_Delivery(self):
        code_delivery = self.lineEdit_40.text()
        name_delivery = self.lineEdit_65.text()
        phone_delivery_1 = self.lineEdit_195.text()
        phone_delivery_2 = self.lineEdit_193.text()
        area_delivery_id = self.comboBox_19.currentIndex()
        governorate_delivery = self.comboBox_10.currentText()
        address_delivery = self.lineEdit_194.text()

        self.cur.execute(''' INSERT INTO delivery
                    (code_delivery,name_delivery,phone_delivery_1,phone_delivery_2,area_delivery_id,governorate_delivery,address_delivery)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                ''', (code_delivery, name_delivery, phone_delivery_1, phone_delivery_2, area_delivery_id, governorate_delivery, address_delivery))
        self.db.commit()

        self.lineEdit_40.setText('')
        self.lineEdit_65.setText('')
        self.lineEdit_195.setText('')
        self.lineEdit_193.setText('')
        self.comboBox_10.setCurrentIndex(0)
        self.comboBox_19.setCurrentIndex(0)
        self.lineEdit_194.setText('')
        self.statusBar().showMessage('تم إضافة بيانات المندوب بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Delivery Added')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Delivery()
        self.Show_Delivery()
        self.Show_History()

    ## Edit Delivery Search
    def Edit_Delivery_Search(self):
        code_delivery = self.lineEdit_40.text()

        sql = ('''
                            SELECT * FROM delivery WHERE code_delivery = %s
                        ''')

        self.cur.execute(sql, [(code_delivery)])

        data = self.cur.fetchone()
        #print(data)

        self.lineEdit_40.setText(str(data[1]))
        self.lineEdit_65.setText(str(data[2]))
        self.lineEdit_195.setText(str(data[3]))
        self.lineEdit_193.setText(str(data[4]))
        self.comboBox_10.setCurrentText(data[6])
        self.comboBox_19.setCurrentIndex(data[5])
        self.lineEdit_194.setText(str(data[7]))

    ## Edit Delivery
    def Edit_Delivery(self):
        code_delivery = self.lineEdit_40.text()
        name_delivery = self.lineEdit_65.text()
        phone_delivery_1 = self.lineEdit_195.text()
        phone_delivery_2 = self.lineEdit_193.text()
        area_delivery = self.comboBox_19.currentIndex()
        governorate_delivery = self.comboBox_10.currentText()
        address_delivery = self.lineEdit_194.text()

        self.cur.execute(''' UPDATE delivery SET name_delivery=%s, phone_delivery_1=%s, phone_delivery_2=%s, area_delivery_id=%s, governorate_delivery=%s, address_delivery=%s WHERE code_delivery=%s
                        ''', (name_delivery, phone_delivery_1, phone_delivery_2, area_delivery, governorate_delivery, address_delivery, code_delivery))
        self.db.commit()

        self.lineEdit_40.setText('')
        self.lineEdit_65.setText('')
        self.lineEdit_195.setText('')
        self.lineEdit_193.setText('')
        self.comboBox_10.setCurrentIndex(0)
        self.comboBox_19.setCurrentIndex(0)
        self.lineEdit_194.setText('')
        self.statusBar().showMessage('تم تعديل بيانات المندوب بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Delivery Edited')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Delivery()
        self.Show_Delivery()
        self.Show_History()

    ## Delette Delivery from DB
    def Delete_Delivery(self):
        code_delivery = self.lineEdit_40.text()
        date = datetime.datetime.now()

        delete_message = QMessageBox.warning(self, "مسح معلومات", "هل أنت متأكد من مسح المندوب ؟",
                                             QMessageBox.Yes | QMessageBox.No)

        if delete_message == QMessageBox.Yes:
            sql = ('''
                                       DELETE FROM delivery WHERE code_delivery = %s
                                   ''')

        self.cur.execute(sql, [(code_delivery)])

        self.db.commit()

        self.lineEdit_40.setText('')
        self.lineEdit_65.setText('')
        self.lineEdit_195.setText('')
        self.lineEdit_193.setText('')
        self.comboBox_10.setCurrentIndex(0)
        self.comboBox_19.setCurrentIndex(0)
        self.lineEdit_194.setText('')
        self.statusBar().showMessage('تم حزف بيانات المندوب بنجاح')
        self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
        print('Delivery Deleted')
        self.Clear_Massage_5_Seconds()
        self.Show_All_Delivery()
        self.Show_Delivery()
        self.Show_History()


##################################
    ## Show All Employees
    def Show_All_Employees(self):
        self.tableWidget_4.setRowCount(0)
        self.tableWidget_4.insertRow(0)

        self.cur.execute('''
                    SELECT code_employee, name_employee, national_id_employee, phone_employee, user_name_employee FROM employees
                    ''')

        data = self.cur.fetchall()

        for row, form in enumerate(data):
            for col, item in enumerate(form):
                self.tableWidget_4.setItem(row, col, QTableWidgetItem(str(item)))
                col += 1

            row_position = self.tableWidget_4.rowCount()
            self.tableWidget_4.insertRow(row_position)



    ## Add New Location
    def Add_New_Employee(self):
        code_employee = self.lineEdit_41.text()
        name_employee = self.lineEdit_66.text()
        phone_employee = self.lineEdit_198.text()
        national_id_employee = self.lineEdit_76.text()
        user_name_employee = self.lineEdit_196.text()
        password_employee = self.lineEdit_197.text()
        password2_employee = self.lineEdit_212.text()
        date = datetime.datetime.now()

        if password_employee == password2_employee:

            self.cur.execute('''
                INSERT INTO employees (code_employee,name_employee,phone_employee,national_id_employee,date,user_name_employee,password_employee,password2_employee)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ''', (code_employee, name_employee, phone_employee, national_id_employee, date, user_name_employee, password_employee, password2_employee))

            self.db.commit()
            self.lineEdit_41.setText('')
            self.lineEdit_66.setText('')
            self.lineEdit_76.setText('')
            self.lineEdit_198.setText('')
            self.lineEdit_196.setText('')
            self.lineEdit_197.setText('')
            self.lineEdit_212.setText('')
            self.statusBar().showMessage('تم إضافة بيانات الموظف بنجاح')
            self.statusBar().setFont(QFont("Arial", 16))  # Set the font size to 16
            print('Employee Added')
            self.Clear_Massage_5_Seconds()
            self.Show_History()
            self.Show_All_Employees()

        else:
            print('Wrong Password')

    ## Edit Employee Search
    def Edit_Employee_Search(self):
        code_employee = self.lineEdit_41.text()

        sql = ('''
                                    SELECT * FROM employees WHERE code_employee = %s
                                ''')

        self.cur.execute(sql, [(code_employee)])

        data = self.cur.fetchone()
        # print(data)

        self.lineEdit_41.setText(str(data[1]))
        self.lineEdit_66.setText(str(data[2]))
        self.lineEdit_76.setText(str(data[6]))
        self.lineEdit_198.setText(str(data[4]))
        self.lineEdit_196.setText(str(data[8]))
        #self.lineEdit_197.setText(str(data[9]))
        #self.lineEdit_212.setText(str(data[10]))


    ## Edit Employee
    def Edit_Employee(self):
        pass

    ## Delette Employee from DB
    def Delete_Employee(self):
        pass

##################################
    ## Add permissions to any employee
    def Add_Employee_Permissions(self):
        pass


###################################################
        # Clear the message in the status bar
###################################################
    def Clear_Massage_5_Seconds(self):
        # Create a QTimer
        self.timer = QTimer()
        # Set the QTimer interval to 3000 milliseconds (5 seconds)
        self.timer.setInterval(5000)
        # Connect the QTimer timeout signal to a slot
        self.timer.timeout.connect(self.clearMessage)

        # Start the QTimer
        self.timer.start()

    def clearMessage(self):
        # Clear the message in the status bar
        self.statusBar().clearMessage()

###################################################

#################################
    ## Employees Report

    ## All Products Report
    def All_Products_Report(self):
        pass

    ## Show report for filtered Products
    def Products_Filter_Report(self):
        pass

    ## Export Products Data To Excel File
    def Products_Export_Report(self):
        pass

#################################
    ## Clients Report

    ## Show All Clients Report

    def All_Clients_Report(self):
        pass

    ## Show Report For Filtered Clients

    def Clients_Filter_Report(self):
        pass

    ## Export Clients Data To Excel File

    def Clients_Export_Report(self):
        pass

#################################
    ## Locations Report

    ## Show All Locations Report

    def All_Locations_Report(self):
        pass

    ## Show Report For Filtered Locations

    def Locations_Filter_Report(self):
        pass

    ## Export Locations Data To Excel File

    def Locations_Export_Report(self):
        pass

#################################
    ## Delivery Report

    ## Show All Delivery Report

    def All_Delivery_Report(self):
        pass

    ## Show Report For Filtered Delivery

    def Delivery_Filter_Report(self):
        pass

    ## Export Delivery Data To Excel File

    def Delivery_Export_Report(self):
        pass

#################################
    ## Employees Report

    ## Show All Employees Report

    def All_Employees_Report(self):
        pass

    ## Show Report For Filtered Books

    def Employees_Filter_Report(self):
        pass

    ## Export Books Data To Excel File

    def Employees_Export_Report(self):
        pass

################################

    ## Show one month report
    def Monthly_Report(self):
        pass

    ## Export Monthly Data To Excel File
    def Monthly_Export_Report(self):
        pass

#################################

    ## Send Reports to The Admin
    def Admin_Reports(self):
        pass

    #################################
    ## History
    ## Show All History To the Admin
    def Show_History(self):
        pass
################################


################################

    ## Main (Graviola_05)
def main():
    app = QApplication(sys.argv)
    window = Main()
    window.show()
    app.exec_()  # infinite loop


if __name__ == '__main__':
    main()